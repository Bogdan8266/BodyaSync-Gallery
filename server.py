# server.py - –§—ñ–Ω–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º –û–†–ò–ì–Ü–ù–ê–õ–¨–ù–û–á –¥–∞—Ç–∏

import os
import shutil
import json
import time
import random
import threading
import uuid
from datetime import datetime

# <--- –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø
from fastapi import FastAPI, UploadFile, File, HTTPException, BackgroundTasks, Form
# server.py

import io # <--- –î–æ–¥–∞–π —Ü–µ
from fastapi import FastAPI, UploadFile, File, HTTPException, BackgroundTasks, Form, Body, Query # <--- –û—Å–Ω–æ–≤–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç—É—Ç
from fastapi.responses import FileResponse, JSONResponse, StreamingResponse # <--- –Ü —Ü–µ
from fastapi.responses import FileResponse, JSONResponse
from PIL import Image, ImageDraw, ImageFont
import ffmpeg
from hachoir.parser import createParser
from hachoir.metadata import extractMetadata
import requests
from gradio_client import Client as GradioClient, file as gradio_file

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–±–µ–∑ –∑–º—ñ–Ω) ---
app = FastAPI(title="My Personal Cloud API")
STORAGE_PATH = "storage"
ORIGINALS_PATH = os.path.join(STORAGE_PATH, "originals")
THUMBNAILS_PATH = os.path.join(STORAGE_PATH, "thumbnails")
METADATA_FILE = os.path.join(STORAGE_PATH, "metadata.json")
MEMORIES_PATH = os.path.join(STORAGE_PATH, "memories") 
MUSIC_FOLDER = os.path.join(STORAGE_PATH, "music")
os.makedirs(ORIGINALS_PATH, exist_ok=True)
os.makedirs(THUMBNAILS_PATH, exist_ok=True)
os.makedirs(ORIGINALS_PATH, exist_ok=True)
os.makedirs(THUMBNAILS_PATH, exist_ok=True)
os.makedirs(MEMORIES_PATH, exist_ok=True)
os.makedirs(MUSIC_FOLDER, exist_ok=True)

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI ---
HF_SPACE_CAPTION_URL = "bodyapromax2010/bodyasync-image-caption"
OLLAMA_API_URL = "http://localhost:11434/api/generate"
OLLAMA_MODEL_NAME = "gemma3:1b"
HF_SPACE_COLLAGE_URL = "bodyapromax2010/black-forest-labs-FLUX.1-dev2"

# --- –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á ---
TASKS = {}

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏ (–±–µ–∑ –∑–º—ñ–Ω) ---
# ... (load_metadata, save_metadata) ...
def load_metadata():
    if not os.path.exists(METADATA_FILE): return {}
    try:
        with open(METADATA_FILE, 'r', encoding='utf-8') as f: return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError): return {}

def save_metadata(data):
    with open(METADATA_FILE, 'w', encoding='utf-8') as f: json.dump(data, f, indent=4, ensure_ascii=False)


# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–≤'—é (–±–µ–∑ –∑–º—ñ–Ω) ---
# ... (create_photo_thumbnail, create_video_thumbnail) ...
def create_photo_thumbnail(image_path: str, thumbnail_path: str):
    try:
        settings = load_settings()
        size = (settings.get("preview_size", 400), settings.get("preview_size", 400))
        quality = settings.get("preview_quality", 80)
        with Image.open(image_path) as img:
            if img.format and img.format.upper() in ['HEIC', 'HEIF']:
                from pillow_heif import register_heif_opener
                register_heif_opener()
                img = Image.open(image_path)
            if img.mode in ("RGBA", "P"): img = img.convert("RGB")
            img.thumbnail(size)
            img.save(thumbnail_path, "JPEG", quality=quality, optimize=True)
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ç–æ-–ø—Ä–µ–≤'—é –¥–ª—è {os.path.basename(image_path)}: {e}")
        return False

def create_video_thumbnail(video_path: str, thumbnail_path: str):
    try:
        settings = load_settings()
        size = settings.get("preview_size", 400)
        (ffmpeg.input(video_path, ss=1).filter('scale', size, -1).output(thumbnail_path, vframes=1).overwrite_output().run(capture_stdout=True, capture_stderr=True))
        return True
    except ffmpeg.Error as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ FFmpeg –¥–ª—è {os.path.basename(video_path)}: {e.stderr.decode()}")
        return False


# =================================================================
# –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –û–¢–†–ò–ú–ê–ù–ù–Ø –û–†–ò–ì–Ü–ù–ê–õ–¨–ù–û–á –î–ê–¢–ò
# =================================================================
def get_original_date(file_path: str) -> float:
    """
    –ù–∞–º–∞–≥–∞—î—Ç—å—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö —Ñ–∞–π–ª—É.
    –Ø–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞—Ç—É –∑–º—ñ–Ω–∏ —Ñ–∞–π–ª—É –≤ —Å–∏—Å—Ç–µ–º—ñ.
    """
    try:
        # –î–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π (JPEG/HEIC)
        if file_path.lower().endswith(('.jpg', '.jpeg', '.heic')):
            with Image.open(file_path) as img:
                exif_data = img._getexif()
                if exif_data:
                    for tag, value in exif_data.items():
                        tag_name = TAGS.get(tag, tag)
                        if tag_name == 'DateTimeOriginal':
                            # –§–æ—Ä–º–∞—Ç 'YYYY:MM:DD HH:MM:SS'
                            dt_obj = datetime.strptime(value, '%Y:%m:%d %H:%M:%S')
                            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç—É –≤ EXIF: {dt_obj}")
                            return dt_obj.timestamp()
    except Exception:
        pass # –ü—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —á–∏—Ç–∞–Ω–Ω—è EXIF

    try:
        # –î–ª—è –≤—ñ–¥–µ–æ (MP4/MOV) –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Hachoir
        parser = createParser(file_path)
        if parser:
            with parser:
                metadata = extractMetadata(parser)
            if metadata and metadata.has('creation_date'):
                dt_obj = metadata.get('creation_date')
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç—É –≤ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ: {dt_obj}")
                return dt_obj.timestamp()
    except Exception:
        pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ Hachoir

    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–º—ñ–Ω–∏ —Ñ–∞–π–ª—É
    fallback_timestamp = os.path.getmtime(file_path)
    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –¥–∞—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback: {datetime.fromtimestamp(fallback_timestamp)}")
    return fallback_timestamp


def get_raw_english_description(image_path):
    print(f"   - –ö—Ä–æ–∫ –ê: –ê–Ω–∞–ª—ñ–∑—É—é —Ñ–æ—Ç–æ '{os.path.basename(image_path)}'...")
    try:
        client = GradioClient(HF_SPACE_CAPTION_URL)
        result = client.predict(gradio_file(image_path), api_name="/predict")
        return (result[0] if isinstance(result, (list, tuple)) else result).strip()
    except Exception as e:
        print(f"   - ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –Ω–∞ HF: {e}"); return None

def create_warm_caption_from_description(english_description, date_info):
    print(f"   - –ö—Ä–æ–∫ –ë: –ì–µ–Ω–µ—Ä—É—é –ø—ñ–¥–ø–∏—Å...")
    prompt_text = f"You are a creative assistant. Transform this technical description: '{english_description}' into a short, warm, nostalgic caption in Ukrainian, considering it was taken '{date_info}'. Write ONLY the final caption."
    payload = {"model": OLLAMA_MODEL_NAME, "prompt": prompt_text, "stream": False}
    try:
        response = requests.post(OLLAMA_API_URL, json=payload, timeout=60)
        response.raise_for_status()
        return response.json().get("response", "").strip() or "–ß—É–¥–æ–≤–∏–π —Å–ø–æ–≥–∞–¥!"
    except requests.exceptions.RequestException as e:
        print(f"   - ‚ùå –ü–æ–º–∏–ª–∫–∞ Ollama: {e}"); return None

def is_good_memory(caption):
    if not caption: return False
    stop_words = ["screenshot", "text", "document", "chart", "diagram"]
    return not any(word in caption.lower() for word in stop_words)

# ... —ñ —Ä–µ—à—Ç–∞ —Ç–≤–æ—ó—Ö —Ñ—É–Ω–∫—Ü—ñ–π (—è —ó—Ö –Ω–µ –±—É–¥—É –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏) ...
# –ú–∏ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤—Å—ñ —Ç–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–∞–∂—É —Ç—É—Ç –ø—Ä–∏—Å—É—Ç–Ω—ñ

# <--- –ù–û–í–ï: –§—É–Ω–∫—Ü—ñ—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –º—É–∑–∏–∫–∏
def select_random_music():
    """–í–∏–±–∏—Ä–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç—Ä–µ–∫ –∑ –ø–∞–ø–∫–∏ music."""
    if not os.path.exists(MUSIC_FOLDER) or not os.listdir(MUSIC_FOLDER):
        print("‚ö†Ô∏è –ü–∞–ø–∫–∞ –∑ –º—É–∑–∏–∫–æ—é –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î.")
        return None
        
    all_files_in_folder = os.listdir(MUSIC_FOLDER)
    # <--- –ù–û–í–ò–ô –†–Ø–î–û–ö –î–õ–Ø –î–ï–ë–ê–ì–£
    print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø—Ü—ñ '{MUSIC_FOLDER}': {all_files_in_folder}")
    
    music_files = [f for f in all_files_in_folder if f.lower().endswith(('.mp3', '.wav', '.ogg', '.m4a'))] # –î–æ–¥–∞–≤ .m4a
    
    if not music_files:
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –∞—É–¥—ñ–æ—Ñ–∞–π–ª—ñ–≤ (.mp3, .wav, .ogg, .m4a).")
        return None
        
    chosen_file = random.choice(music_files)
    print(f"üéµ –û–±—Ä–∞–Ω–æ –º—É–∑–∏—á–Ω–∏–π —Ç—Ä–µ–∫: {chosen_file}")
    return chosen_file

def create_memory_story_worker(task_id: str):
    """
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î –≤—Å—é –≤–∞–∂–∫—É —Ä–æ–±–æ—Ç—É —É —Ñ–æ–Ω—ñ.
    """
    try:
        TASKS[task_id] = {"status": "processing", "message": "Selecting photos..."}
        print(f"[{task_id}] –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≥–∞–¥—É...")
        
        # --- –ï–¢–ê–ü 1: –í–Ü–î–ë–Ü–† –§–û–¢–û–ì–†–ê–§–Ü–ô (–¶–ï –ú–ê–Ñ –ë–£–¢–ò –¢–£–¢!) ---
        all_images = [f for f in os.listdir(ORIGINALS_PATH) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        if len(all_images) < 2:
            raise Exception("–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏.")

        num_to_find = random.randint(2, min(5, len(all_images)))
        selected_memories, available_images = [], all_images.copy() # <--- –û–°–¨ –¢–£–¢ –°–¢–í–û–†–Æ–Ñ–¢–¨–°–Ø –ó–ú–Ü–ù–ù–ê

        while len(selected_memories) < num_to_find and available_images:
            image_name = random.choice(available_images)
            available_images.remove(image_name)
            image_path = os.path.join(ORIGINALS_PATH, image_name)
            
            # ... (—Ç–≤—ñ–π –∫–æ–¥ –∞–Ω–∞–ª—ñ–∑—É —Ñ–æ—Ç–æ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å—ñ–≤) ...
            raw_description = get_raw_english_description(image_path)
            if raw_description and is_good_memory(raw_description):
                date_info = f"–∑—Ä–æ–±–ª–µ–Ω–æ {datetime.fromtimestamp(os.path.getmtime(image_path)).strftime('%d %B, %Y')}"
                final_caption = create_warm_caption_from_description(raw_description, date_info)
                if final_caption:
                    selected_memories.append({"filename": image_name, "caption": final_caption})
        # --- –ö–Ü–ù–ï–¶–¨ –ï–¢–ê–ü–£ –í–Ü–î–ë–û–†–£ ---

        if not selected_memories: # <--- –¢–µ–ø–µ—Ä —Ü—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—è—â–æ–≥–æ —Ñ–æ—Ç–æ.")
            
        TASKS[task_id]["message"] = "Creating collage..."

        # --- –ï–¢–ê–ü 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–∞–∂—É ---
        collage_filename = f"collage_{task_id}.png"
        collage_output_path = os.path.join(MEMORIES_PATH, collage_filename)
        
        # –ü–µ—Ä–µ–¥–∞—î–º–æ –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ "–î–∏–∑–∞–π–Ω–µ—Ä—É"
        create_collage_and_save(selected_memories, collage_output_path)

        # --- –ï–¢–ê–ü 3: –í–∏–±—ñ—Ä –º—É–∑–∏–∫–∏ —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ ---
        TASKS[task_id]["message"] = "Finalizing..."
        music_file = select_random_music()
        
        story_items = []
        for memory in selected_memories:
            story_items.append({
                "type": "image",
                "imageUrl": f"/original/{memory['filename']}",
                "caption": memory['caption'],
            })
            
        story_items.append({
            "type": "collage",
            "imageUrl": f"/memories/{collage_filename}",
            "caption": "–í–∞—à—ñ –Ω–∞–π–∫—Ä–∞—â—ñ –º–æ–º–µ–Ω—Ç–∏ —Ä–∞–∑–æ–º!",
        })

        final_result = {
            "id": task_id,
            "title": f"–°–ø–æ–≥–∞–¥ –≤—ñ–¥ {datetime.now().strftime('%d %B')}",
            "musicUrl": f"/music/{music_file}" if music_file else None,
            "items": story_items,
        }

        result_filepath = os.path.join(MEMORIES_PATH, f"{task_id}.json")
        with open(result_filepath, 'w', encoding='utf-8') as f:
            json.dump(final_result, f, ensure_ascii=False, indent=2)

        TASKS[task_id] = {"status": "complete", "result": final_result}
        print(f"[{task_id}] ‚úÖ –°–ø–æ–≥–∞–¥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

    except Exception as e:
        print(f"[{task_id}] üõë –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
        TASKS[task_id] = {"status": "failed", "error": str(e)}

# server.py

# ... (–≤—Å—ñ —Ç–≤–æ—ó —ñ–º–ø–æ—Ä—Ç–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó-—Ö–µ–ª–ø–µ—Ä–∏) ...

# <--- –ù–û–í–ê, –ü–†–ê–í–ò–õ–¨–ù–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –ö–û–õ–ê–ñ–£
# server.py

def create_collage_and_save(selected_memories: list, output_path: str):
    """
    –ü—Ä–∏–π–º–∞—î –í–ñ–ï –í–Ü–î–Ü–ë–†–ê–ù–ò–ô —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ —ñ —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
    """
    print("üñºÔ∏è –ü–æ—á–∏–Ω–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–∞–∂—É...")
    
    # <--- –ö–õ–Æ–ß–û–í–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –î–æ–¥–∞—î–º–æ try...except –±–ª–æ–∫
    try:
        # --- –°–Æ–î–ò –¢–ò –í–°–¢–ê–í–õ–Ø–Ñ–® –í–°–Æ –°–í–û–Æ –õ–û–ì–Ü–ö–£ –ì–ï–ù–ï–†–ê–¶–Ü–á –ö–û–õ–ê–ñ–£ ---
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
        # selected_filenames = [m['filename'] for m in selected_memories]
        # dominant_colors = [get_dominant_color(...) for name in selected_filenames]
        # prompt = chosen_strategy(dominant_colors)
        # collage = generate_background_with_hf_space(prompt).convert("RGBA")
        #
        # ... (—Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ñ–æ—Ç–æ –Ω–∞ —Ñ–æ–Ω—ñ) ...
        #
        # collage.save(output_path)
        # -----------------------------------------------------------------

        # --- –¢–ò–ú–ß–ê–°–û–í–ê –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –ü–ï–†–ï–í–Ü–†–ö–ò ---
        # –Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à —à–≤–∏–¥–∫–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π —Ü–µ–π –±–ª–æ–∫,
        # –∞ —Å–≤—ñ–π –∫–æ–¥ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–∫–æ–º–µ–Ω—Ç—É–π.
        print("   - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–ª—É—à–∫–∏ –∫–æ–ª–∞–∂—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...")
        placeholder_collage = Image.new("RGB", (1080, 1920), (random.randint(0,255), random.randint(0,255), random.randint(0,255)))
        draw = ImageDraw.Draw(placeholder_collage)
        draw.text((100, 100), f"–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ–ª–∞–∂\n{len(selected_memories)} —Ñ–æ—Ç–æ", font=FONT, fill=(255,255,255))
        placeholder_collage.save(output_path)
        # --- –ö–Ü–ù–ï–¶–¨ –ó–ê–ì–õ–£–®–ö–ò ---

        print(f"‚úÖ –ö–æ–ª–∞–∂ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É: {output_path}")
        return True
    
    except Exception as e:
        # –Ø–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –º–∏ –ø–æ–±–∞—á–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É –≤ –ª–æ–≥–∞—Ö
        print(f"üõëüõëüõë –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–∞–∂—É: {e}")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏ 404, –∞–ª–µ –≤ –¥–æ–¥–∞—Ç–∫—É –±—É–¥–µ –≤–∏–¥–Ω–æ, —â–æ —â–æ—Å—å –Ω–µ —Ç–∞–∫
        Image.new("RGB", (100, 100), (0,0,0)).save(output_path)
        return False
# ... (—Ä–µ—à—Ç–∞ —Ç–≤–æ—ó—Ö —Ñ—É–Ω–∫—Ü—ñ–π, –Ω–∞–ø—Ä. select_random_music)

# =================================================================
# –û–ù–û–í–õ–ï–ù–Ü –ì–û–õ–û–í–ù–Ü –ï–ù–î–ü–û–Ü–ù–¢–ò
# =================================================================
# server.py

# ... (–≤—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó-—Ö–µ–ª–ø–µ—Ä–∏ –±–µ–∑ –∑–º—ñ–Ω) ...

# <--- –ó–ú–Ü–ù–ê: –ú–æ–¥–∏—Ñ—ñ–∫—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç
@app.get("/files/list/")
async def list_files_in_path(path: str = ""):
    base_path = os.path.abspath(ORIGINALS_PATH)
    requested_path = os.path.abspath(os.path.join(base_path, path))

    if not requested_path.startswith(base_path):
        raise HTTPException(status_code=403, detail="Access denied")
    if not os.path.isdir(requested_path):
        raise HTTPException(status_code=404, detail="Directory not found")

    items = []
    # <--- –ó–ú–Ü–ù–ê: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ, —â–æ–± –∑–Ω–∞—Ç–∏, —è–∫—ñ —Ñ–∞–π–ª–∏ —î —á–∞—Å—Ç–∏–Ω–æ—é –≥–∞–ª–µ—Ä–µ—ó
    gallery_metadata = load_metadata()
    gallery_files = set(gallery_metadata.keys()) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ set –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É

    # –î–æ–¥–∞—î–º–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—É –ø–∞–ø–∫—É "–ì–∞–ª–µ—Ä–µ—è" —Ç—ñ–ª—å–∫–∏ –≤ –∫–æ—Ä–µ–Ω—ñ
    if not path:
        items.append({"name": "–ì–∞–ª–µ—Ä–µ—è", "type": "virtual_gallery"})

    try:
        for item_name in os.listdir(requested_path):
            item_path = os.path.join(requested_path, item_name)
            
            # <--- –ó–ú–Ü–ù–ê: –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ñ–∞–π–ª–∏, —è–∫—ñ —î —á–∞—Å—Ç–∏–Ω–æ—é –≥–∞–ª–µ—Ä–µ—ó
            # –ü–æ–∫–∞–∑—É—î–º–æ —ó—Ö —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–∏ –ù–ï –≤ –∫–æ—Ä–µ–Ω–µ–≤—ñ–π –ø–∞–ø—Ü—ñ
            if os.path.isfile(item_path) and item_name in gallery_files and not path:
                continue # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ –≥–∞–ª–µ—Ä–µ—ó –≤ –∫–æ—Ä–µ–Ω–µ–≤—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó

            if os.path.isdir(item_path):
                items.append({"name": item_name, "type": "directory"})
            else:
                size = os.path.getsize(item_path)
                items.append({"name": item_name, "type": "file", "size": size})
        
        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–∏–º —Å–∞–º–∏–º
        items.sort(key=lambda x: (
            0 if x['type'] == 'virtual_gallery' else 1 if x['type'] == 'directory' else 2,
            x['name'].lower()
        ))
        return JSONResponse(content={"path": path, "items": items})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ... (—Ä–µ—à—Ç–∞ –∫–æ–¥—É —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –∑–º—ñ–Ω) ...

@app.post("/files/create_folder/")
async def create_folder(path: str = Form(...), folder_name: str = Form(...)):
    base_path = os.path.abspath(ORIGINALS_PATH)
    target_dir_path = os.path.abspath(os.path.join(base_path, path))

    if not target_dir_path.startswith(base_path):
        raise HTTPException(status_code=403, detail="Access denied")
    if not os.path.isdir(target_dir_path):
        raise HTTPException(status_code=404, detail="Parent directory not found")

    new_folder_path = os.path.join(target_dir_path, folder_name)
    if os.path.exists(new_folder_path):
        raise HTTPException(status_code=409, detail="Folder with this name already exists")
    
    try:
        os.makedirs(new_folder_path)
        return {"status": "success", "message": f"Folder '{folder_name}' created."}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# <--- –ù–û–í–ï: –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–∞–ø–∫—É
@app.post("/files/upload_to_path/")
async def upload_file_to_path(file: UploadFile = File(...), path: str = Form("")):
    base_path = os.path.abspath(ORIGINALS_PATH)
    target_dir_path = os.path.abspath(os.path.join(base_path, path))

    if not target_dir_path.startswith(base_path):
        raise HTTPException(status_code=403, detail="Access denied")
    if not os.path.isdir(target_dir_path):
        raise HTTPException(status_code=404, detail="Target directory not found")

    file_location = os.path.join(target_dir_path, file.filename)
    
    with open(file_location, "wb+") as file_object:
        shutil.copyfileobj(file.file, file_object)

    # –Ø–∫—â–æ —Ü–µ –º–µ–¥—ñ–∞—Ñ–∞–π–ª, –æ–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è –≥–∞–ª–µ—Ä–µ—ó
    file_extension = os.path.splitext(file.filename.lower())[1]
    if file_extension in ['.jpg', '.jpeg', '.png', '.gif', '.mp4', '.mov']:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ª–æ–≥—ñ–∫—É –∑ —Ç–≤–æ–≥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞ /upload/
        # (—Ü–µ —Å–ø—Ä–æ—â–µ–Ω–Ω—è, –≤ —ñ–¥–µ–∞–ª—ñ —Ü—é –ª–æ–≥—ñ–∫—É —Ç—Ä–µ–±–∞ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –æ–∫—Ä–µ–º—É —Ñ—É–Ω–∫—Ü—ñ—é)
        thumbnail_filename = f"{os.path.splitext(file.filename)[0]}.jpg"
        thumbnail_path = os.path.join(THUMBNAILS_PATH, thumbnail_filename)
        metadata = load_metadata()
        metadata[file.filename] = {
            "type": "image" if file_extension in ['.jpg', '.jpeg', '.png', '.gif'] else "video",
            "thumbnail": thumbnail_filename,
            "timestamp": get_original_date(file_location)
        }
        save_metadata(metadata)
        if metadata[file.filename]["type"] == "image":
             create_photo_thumbnail(file_location, thumbnail_path)
        else:
             create_video_thumbnail(file_location, thumbnail_path)


    return {"status": "success", "filename": file.filename}

@app.post("/memories/generate")
async def generate_memory_story(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫–∞—î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ø–æ–≥–∞–¥—É."""
    task_id = str(uuid.uuid4())
    TASKS[task_id] = {"status": "starting", "message": "Task received."}
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ BackgroundTasks –≤—ñ–¥ FastAPI –¥–ª—è –∑–∞–ø—É—Å–∫—É —É —Ñ–æ–Ω—ñ
    background_tasks.add_task(create_memory_story_worker, task_id)
    return {"task_id": task_id}


@app.get("/memories/status/{task_id}")
async def get_memory_status(task_id: str):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó."""
    task = TASKS.get(task_id)
    if not task:
        raise HTTPException(status_code=404, detail="Task not found")
    return task

@app.get("/memories/")
async def get_all_memories():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ä–∞–Ω—ñ—à–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö —Å–ø–æ–≥–∞–¥—ñ–≤."""
    memory_files = [f for f in os.listdir(MEMORIES_PATH) if f.endswith('.json')]
    all_memories = []
    for filename in memory_files:
        try:
            with open(os.path.join(MEMORIES_PATH, filename), 'r', encoding='utf-8') as f:
                all_memories.append(json.load(f))
        except:
            continue
    # –°–æ—Ä—Ç—É—î–º–æ –≤—ñ–¥ –Ω–æ–≤—ñ—à–∏—Ö –¥–æ —Å—Ç–∞—Ä—ñ—à–∏—Ö, –ø—Ä–∏–ø—É—Å–∫–∞—é—á–∏, —â–æ ID (uuid) –º–∞—î —á–∞—Å
    all_memories.sort(key=lambda x: x.get('id'), reverse=True)
    return all_memories

# –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–ª–∞–∂—ñ–≤ —Ç–∞ –º—É–∑–∏–∫–∏
@app.get("/memories/{filename}")
async def get_memory_asset(filename: str):
    file_path = os.path.join(MEMORIES_PATH, filename)
    if os.path.exists(file_path):
        return FileResponse(file_path)
    raise HTTPException(status_code=404, detail="Memory asset not found")

@app.get("/music/{filename}")
async def get_music_asset(filename: str):
    file_path = os.path.join(MUSIC_FOLDER, filename)
    if os.path.exists(file_path):
        return FileResponse(file_path)
    raise HTTPException(status_code=404, detail="Music asset not found")


@app.post("/upload/")
async def upload_file(file: UploadFile = File(...)):
    # ... (–∫–æ–¥ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–∏–º —Å–∞–º–∏–º) ...
    supported_image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.heic', 'webp']
    supported_video_extensions = ['.mp4', '.mov', '.avi', '.mkv', 'webm']
    original_file_path = os.path.join(ORIGINALS_PATH, file.filename)
    with open(original_file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    file_extension = os.path.splitext(file.filename.lower())[1]
    file_type = None
    if file_extension in supported_image_extensions: file_type = "image"
    elif file_extension in supported_video_extensions: file_type = "video"
    else: return {"filename": file.filename, "status": "skipped", "message": "Unsupported file type"}

    # ... (–∫–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–≤'—é –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–∏–º —Å–∞–º–∏–º) ...
    thumbnail_filename = f"{os.path.splitext(file.filename)[0]}.jpg"
    thumbnail_file_path = os.path.join(THUMBNAILS_PATH, thumbnail_filename)
    thumbnail_created = False
    if file_type == "image": thumbnail_created = create_photo_thumbnail(original_file_path, thumbnail_file_path)
    elif file_type == "video": thumbnail_created = create_video_thumbnail(original_file_path, thumbnail_file_path)

    if thumbnail_created:
        metadata = load_metadata()
        metadata[file.filename] = {
            "type": file_type,
            "thumbnail": thumbnail_filename,
            # --- –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ù–û–í–£ –§–£–ù–ö–¶–Ü–Æ ---
            "timestamp": get_original_date(original_file_path)
        }
        save_metadata(metadata)
        return {"filename": file.filename, "type": file_type, "status": "success"}
    else:
        raise HTTPException(status_code=500, detail="Could not create thumbnail")


# --- –ï–ù–î–ü–û–Ü–ù–¢ get_gallery/ –ó–ê–õ–ò–®–ê–Ñ–¢–¨–°–Ø –ë–ï–ó –ó–ú–Ü–ù, –≤—ñ–Ω –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π ---
@app.get("/gallery/")
async def get_gallery_list():
    metadata = load_metadata()
    if not metadata: return []
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .get() –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è timestamp, –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
    sorted_items = sorted(metadata.items(), key=lambda item: item[1].get('timestamp', 0), reverse=True)
    gallery_list = [
        {"filename": key, "type": value["type"], "thumbnail": value["thumbnail"], "timestamp": value.get("timestamp")}
        for key, value in sorted_items if value.get("timestamp") # –í—ñ–¥–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, –¥–µ —î timestamp
    ]
    return JSONResponse(content=gallery_list)


@app.get("/thumbnail/{filename}")
# ... (–±–µ–∑ –∑–º—ñ–Ω) ...
async def get_thumbnail(filename: str):
    file_path = os.path.join(THUMBNAILS_PATH, filename)
    if os.path.exists(file_path): return FileResponse(file_path)
    raise HTTPException(status_code=404, detail="Thumbnail not found")

@app.get("/original/{filename}")
# ... (–±–µ–∑ –∑–º—ñ–Ω) ...
async def get_original_file(filename: str):
    file_path = os.path.join(ORIGINALS_PATH, filename)
    if os.path.exists(file_path): return FileResponse(file_path)
    raise HTTPException(status_code=404, detail="File not found")

@app.post("/gallery/rescan")
async def rescan_storage():
    # ... (—Ü–µ–π –∫–æ–¥ —Ç—Ä–µ–±–∞ —Ç–µ–∂ –æ–Ω–æ–≤–∏—Ç–∏, —â–æ–± –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤ get_original_date) ...
    supported_image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.heic', 'webp']
    supported_video_extensions = ['.mp4', '.mov', '.avi', '.mkv', 'webm']
    metadata = load_metadata()
    original_files = os.listdir(ORIGINALS_PATH)
    processed_count, updated_count = 0, 0
    
    for filename in original_files:
        original_file_path = os.path.join(ORIGINALS_PATH, filename)
        # –ü–µ—Ä–µ—Å–∫–∞–Ω—É—î–º–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–∞–ø–∏—Å –Ω–µ–ø–æ–≤–Ω–∏–π (–Ω–µ–º–∞—î timestamp)
        if filename in metadata and 'timestamp' in metadata[filename]: continue
            
        if filename in metadata: updated_count += 1
        else: processed_count += 1

        file_extension = os.path.splitext(filename.lower())[1]
        file_type = None
        if file_extension in supported_image_extensions: file_type = "image"
        elif file_extension in supported_video_extensions: file_type = "video"
        else: continue

        thumbnail_filename = f"{os.path.splitext(filename)[0]}.jpg"
        thumbnail_file_path = os.path.join(THUMBNAILS_PATH, thumbnail_filename)
        
        if not os.path.exists(thumbnail_file_path):
            created = False
            if file_type == "image": created = create_photo_thumbnail(original_file_path, thumbnail_file_path)
            elif file_type == "video": created = create_video_thumbnail(original_file_path, thumbnail_file_path)
            if not created: continue

        # --- –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ù–û–í–£ –§–£–ù–ö–¶–Ü–Æ –Ü –¢–£–¢ ---
        metadata[filename] = {
            "type": file_type,
            "thumbnail": thumbnail_filename,
            "timestamp": get_original_date(original_file_path)
        }

    save_metadata(metadata)
    message = f"Scan complete. New: {processed_count}. Updated: {updated_count}."
    return {"status": "success", "message": message}

# --- –ì–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
SETTINGS_FILE = os.path.join(STORAGE_PATH, "settings.json")
DEFAULT_SETTINGS = {
    "preview_size": 400,
    "preview_quality": 80,
    "photo_size": 0,      # 0 = –æ—Ä–∏–≥—ñ–Ω–∞–ª
    "photo_quality": 100,
}

def load_settings():
    if not os.path.exists(SETTINGS_FILE):
        return DEFAULT_SETTINGS.copy()
    try:
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            return {**DEFAULT_SETTINGS, **json.load(f)}
    except Exception:
        return DEFAULT_SETTINGS.copy()

def save_settings(settings):
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings, f, indent=2, ensure_ascii=False)

@app.get("/settings/")
async def get_settings():
    return load_settings()

@app.post("/settings/")
async def update_settings(data: dict = Body(...)):
    settings = load_settings()
    for key in DEFAULT_SETTINGS:
        if key in data:
            settings[key] = data[key]
    save_settings(settings)
    return {"status": "success", "settings": settings}

@app.post("/thumbnails/clear_cache/")
async def clear_thumbnails_cache():
    try:
        for fname in os.listdir(THUMBNAILS_PATH):
            fpath = os.path.join(THUMBNAILS_PATH, fname)
            if os.path.isfile(fpath):
                os.remove(fpath)
        return {"status": "success", "message": "Thumbnail cache cleared"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

print("üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏! (v_final, –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—é –¥–∞—Ç–æ—é)")

@app.get("/original_resized/{filename}")
async def get_resized_original(filename: str):
    file_path = os.path.join(ORIGINALS_PATH, filename)
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="File not found")
    settings = load_settings()
    max_size = settings.get("photo_size", 0)
    quality = settings.get("photo_quality", 100)
    ext = os.path.splitext(filename.lower())[1]
    # –Ø–∫—â–æ –Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–¥–∞—î–º–æ —Ñ–∞–π–ª
    if ext not in [".jpg", ".jpeg", ".png", ".heic", ".webp"]:
        return FileResponse(file_path)
    try:
        with Image.open(file_path) as img:
            # HEIC/HEIF –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
            if img.format and img.format.upper() in ['HEIC', 'HEIF']:
                from pillow_heif import register_heif_opener
                register_heif_opener()
                img = Image.open(file_path)
            if img.mode in ("RGBA", "P"):
                img = img.convert("RGB")
            # –Ø–∫—â–æ max_size > 0 ‚Äî –∑–º—ñ–Ω—é—î–º–æ —Ä–æ–∑–º—ñ—Ä
            if max_size and max_size > 0:
                img.thumbnail((max_size, max_size))
            buf = io.BytesIO()
            img.save(buf, "JPEG", quality=quality, optimize=True)
            buf.seek(0)
            return StreamingResponse(buf, media_type="image/jpeg")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∏—Å–∫–∞–Ω–Ω—è: {e}")
        return FileResponse(file_path)

@app.post("/thumbnails/generate_all/")
async def generate_all_thumbnails():
    """
    –ì–µ–Ω–µ—Ä—É—î –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏ –¥–ª—è –≤—Å—ñ—Ö –º–µ–¥—ñ–∞—Ñ–∞–π–ª—ñ–≤ —É ORIGINALS_PATH –∑–≥—ñ–¥–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏.
    """
    supported_image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.heic', 'webp']
    supported_video_extensions = ['.mp4', '.mov', '.avi', '.mkv', 'webm']
    metadata = load_metadata()
    original_files = os.listdir(ORIGINALS_PATH)
    generated, failed = 0, 0

    for filename in original_files:
        original_file_path = os.path.join(ORIGINALS_PATH, filename)
        file_extension = os.path.splitext(filename.lower())[1]
        file_type = None
        if file_extension in supported_image_extensions:
            file_type = "image"
        elif file_extension in supported_video_extensions:
            file_type = "video"
        else:
            continue

        thumbnail_filename = f"{os.path.splitext(filename)[0]}.jpg"
        thumbnail_file_path = os.path.join(THUMBNAILS_PATH, thumbnail_filename)

        try:
            if file_type == "image":
                created = create_photo_thumbnail(original_file_path, thumbnail_file_path)
            else:
                created = create_video_thumbnail(original_file_path, thumbnail_file_path)
            if created:
                generated += 1
            else:
                failed += 1
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏ –¥–ª—è {filename}: {e}")
            failed += 1

    return {"status": "success", "generated": generated, "failed": failed}

@app.get("/original_with_path/")
async def get_original_with_path(path: str = Query(...)):
    base_path = os.path.abspath(ORIGINALS_PATH)
    requested_file = os.path.abspath(os.path.join(base_path, path))
    if not requested_file.startswith(base_path):
        raise HTTPException(status_code=403, detail="Access denied")
    if not os.path.isfile(requested_file):
        raise HTTPException(status_code=404, detail="File not found")
    return FileResponse(requested_file)