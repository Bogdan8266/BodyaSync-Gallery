import os
import random
import json
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
from gradio_client import Client

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
HF_SPACE_URL = "bodyapromax2010/black-forest-labs-FLUX.1-dev22"
IMAGE_FOLDER = "test_images"
ASSETS_FOLDER = "assets"
FRAMES_CONFIG = os.path.join(ASSETS_FOLDER, "frames_config.json")
FONT_FILE = os.path.join(ASSETS_FOLDER, "Roboto-Regular.ttf")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —à—Ä–∏—Ñ—Ç
try:
    FONT = ImageFont.truetype(FONT_FILE, 30)
except IOError:
    FONT = ImageFont.load_default()

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ä–∞–º–æ–∫
def load_frames_config():
    if os.path.exists(FRAMES_CONFIG):
        with open(FRAMES_CONFIG, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {
        "frame1.png": {"scale": 1.0, "offset_x": 0, "offset_y": 0},
        "frame2.png": {"scale": 1.1, "offset_x": -10, "offset_y": -5}
    }

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ä–∞–º–æ–∫
def save_frames_config(config):
    with open(FRAMES_CONFIG, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2)

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

def get_dominant_color(image_path):
    """–í–∏–∑–Ω–∞—á–∞—î –¥–æ–º—ñ–Ω—É—é—á–∏–π –∫–æ–ª—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
    img = Image.open(image_path)
    img = img.resize((1, 1), Image.Resampling.LANCZOS)
    color = img.getpixel((0, 0))
    return f"#{color[0]:02x}{color[1]:02x}{color[2]:02x}"

def apply_frame(photo, frame_path, config):
    """
    –ù–∞–∫–ª–∞–¥–∞—î —Ä–∞–º–∫—É –Ω–∞ —Ñ–æ—Ç–æ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è.
    –ü—ñ–¥—Ç—Ä–∏–º—É—î –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–∏–π 'scale' —Ç–∞ –Ω–µ–∑–∞–ª–µ–∂–Ω—ñ 'scale_x', 'scale_y'.
    """
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —à–∞–±–ª–æ–Ω —Ä–∞–º–∫–∏
        frame_template = Image.open(frame_path).convert("RGBA")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        params = config.get(os.path.basename(frame_path), {})
        
        # <<< –ü–û–ß–ê–¢–û–ö –ù–û–í–û–á –õ–û–ì–Ü–ö–ò –ú–ê–°–®–¢–ê–ë–£–í–ê–ù–ù–Ø >>>
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        scale = params.get("scale", 1.0)
        scale_x = params.get("scale_x") # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –±—É–¥–µ None, —è–∫—â–æ –Ω–µ–º–∞—î
        scale_y = params.get("scale_y") # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –±—É–¥–µ None, —è–∫—â–æ –Ω–µ–º–∞—î
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ä–∞–º–∫–∏
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —É –Ω–µ–∑–∞–ª–µ–∂–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        if scale_x is not None and scale_y is not None:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–µ–∑–∞–ª–µ–∂–Ω–µ —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è
            print(f"   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–µ–∑–∞–ª–µ–∂–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è: x={scale_x}, y={scale_y}")
            new_frame_width = int(photo.width * scale_x)
            new_frame_height = int(photo.height * scale_y)
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
            print(f"   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è: {scale}")
            new_frame_width = int(photo.width * scale)
            new_frame_height = int(photo.height * scale)
        
        # <<< –ö–Ü–ù–ï–¶–¨ –ù–û–í–û–á –õ–û–ì–Ü–ö–ò –ú–ê–°–®–¢–ê–ë–£–í–ê–ù–ù–Ø >>>
            
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–º—ñ—â–µ–Ω–Ω—è
        offset_x = params.get("offset_x", 0)
        offset_y = params.get("offset_y", 0)
        
        # –ó–º—ñ–Ω—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ä–∞–º–∫–∏
        resized_frame = frame_template.resize((new_frame_width, new_frame_height), Image.Resampling.LANCZOS)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ, –ø—Ä–æ–∑–æ—Ä–µ –ø–æ–ª–æ—Ç–Ω–æ —Ä–æ–∑–º—ñ—Ä–æ–º –∑ –Ω–∞—à—É —Ä–∞–º–∫—É
        result_canvas = Image.new("RGBA", resized_frame.size, (0, 0, 0, 0))
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –§–û–¢–û–ì–†–ê–§–Ü–á, —â–æ–± –≤–æ–Ω–∞ –±—É–ª–∞ –≤ —Ü–µ–Ω—Ç—Ä—ñ –ø–æ–ª–æ—Ç–Ω–∞
        photo_x = (resized_frame.width - photo.width) // 2 + offset_x
        photo_y = (resized_frame.height - photo.height) // 2 + offset_y
        
        # –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–∑–æ—Ä–µ –ø–æ–ª–æ—Ç–Ω–æ
        result_canvas.paste(photo, (photo_x, photo_y))
        
        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –†–ê–ú–ö–£ –ø–æ–≤–µ—Ä—Ö —É—Å—å–æ–≥–æ
        result_canvas.paste(resized_frame, (0, 0), resized_frame)
        
        return result_canvas
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—ñ —Ä–∞–º–∫–∏: {e}")
        return photo

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ñ–æ–Ω—É ---

def get_prompt_filmstrip_abstraction(colors_hex): return (f"A minimalist abstract background, vintage 35mm filmstrip, soft gradients, {random.choice(colors_hex)} and pastel palette, light leaks, cinematic, fine grain, 8k.")
def get_prompt_warm_retro_sky(colors_hex): return (f"A dreamy, retro-style abstract background, 70s sunset, warm {random.choice(colors_hex)} palette, smooth gradients, hazy clouds, sunburst effect, nostalgic film grain, ethereal, high resolution.")
def get_prompt_futuristic_geometry(colors_hex): return (f"A modern, tech-style abstract background, clean layered dynamic curved and straight lines, monochrome base with sharp vibrant {random.choice(colors_hex)} accents, holographic elements, smooth highlights, minimalist vector art, Behance HD.")
def get_prompt_soft_blobs(colors_hex): return (f"A serene minimalist organic background, large soft amorphous shapes like liquid ink bleeds, blended with smooth gradients in a soft {random.choice(colors_hex)} palette, subtle paper texture, bokeh effect, calm, high quality.")
def get_prompt_brushstrokes(colors_hex): return (f"An artistic abstract background, modern canvas painting style, energetic broad textured brushstrokes, calligraphic linear patterns, harmonious {random.choice(colors_hex)} scheme, light canvas texture, balanced composition.")
def get_prompt_symbolic_shapes(colors_hex): return (f"A clean modern graphic design background, soft gradient {random.choice(colors_hex)} base, simple icon-like vector shapes (thin circles, planet outlines), sparsely placed with gentle drop shadows, fine grain texture, rule of thirds.")
def get_prompt_abstract_flowers(colors_hex): return (f"A soft pastel abstract background, delicate minimalist botanical illustrations, simple line-art flower silhouettes, smoothly blended {random.choice(colors_hex)} gradient, subtle grain, ethereal glow for depth.")
def get_prompt_abstract_windows(colors_hex): return (f"A minimal architectural-style abstract background, layered framed square and rectangle shapes of varying opacities, on a smooth gradient {random.choice(colors_hex)} base, soft shadows, light grain, sharp highlights on edges.")
def get_prompt_watercolor_texture(colors_hex): return (f"A beautiful watercolor-style abstract background, heavily blended textured brushstrokes in {random.choice(colors_hex)} palette, organic gradient transitions, visible high-quality paper grain, realistic water smudges, artistic.")
def get_prompt_lines_and_splatters(colors_hex): return (f"A minimal abstract composition, modern art style, random organic ink splatters, irregular hand-drawn stripes, on a soft off-white paper texture, limited palette of black, gold, and one accent color (teal or rust), delicate grain.")
BACKGROUND_STRATEGIES = [get_prompt_filmstrip_abstraction, get_prompt_warm_retro_sky, get_prompt_futuristic_geometry, get_prompt_soft_blobs, get_prompt_brushstrokes, get_prompt_symbolic_shapes, get_prompt_abstract_flowers, get_prompt_abstract_windows, get_prompt_watercolor_texture, get_prompt_lines_and_splatters]

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ–æ–Ω–∞ ---

def generate_background_with_hf_space(prompt):
    """–ì–µ–Ω–µ—Ä—É—î —Ñ–æ–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Hugging Face Space."""
    print(f"ü§ñ –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ–æ–Ω –∑–∞ –ø—Ä–æ–º–ø—Ç–æ–º: {prompt[:120]}...")
    
    try:
        client = Client(HF_SPACE_URL)
        result = client.predict(
            prompt, 
            "low quality, blurry, text, watermark, logo, ugly", 
            api_name="/infer"
        )
        image_path = result[0]
        return Image.open(image_path).resize((1080, 1920), Image.Resampling.LANCZOS)
    except Exception as e:
        print(f"üõë –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ñ–æ–Ω—É: {e}")
        return Image.new("RGB", (1080, 1920), (128, 0, 128))  # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π —Ñ–æ–Ω

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ç–∏–Ω—É ---

def check_overlap(box1, box2, max_overlap_ratio=0.25):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–µ—Ä–µ—Ç–∏–Ω–∞—é—Ç—å—Å—è –æ–±–ª–∞—Å—Ç—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π."""
    inter_left = max(box1[0], box2[0])
    inter_top = max(box1[1], box2[1])
    inter_right = min(box1[2], box2[2])
    inter_bottom = min(box1[3], box2[3])
    
    if inter_right > inter_left and inter_bottom > inter_top:
        inter_area = (inter_right - inter_left) * (inter_bottom - inter_top)
        box1_area = (box1[2] - box1[0]) * (box1[3] - box1[1])
        if box1_area > 0 and inter_area / box1_area > max_overlap_ratio:
            return True
    return False

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ---
# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ---
if __name__ == "__main__":
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ä–∞–º–æ–∫
    frames_config = load_frames_config()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–∫–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
    if not os.path.exists(IMAGE_FOLDER):
        os.makedirs(IMAGE_FOLDER)
        print(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å: {IMAGE_FOLDER}")
        print("‚ÑπÔ∏è –î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –≤ –ø–∞–ø–∫—É —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É")
        exit()

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
    all_images = [f for f in os.listdir(IMAGE_FOLDER) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    if len(all_images) < 2:
        print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –¥–ª—è –∫–æ–ª–∞–∂—É")
        exit()

    # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
    num_photos = random.randint(2, min(5, len(all_images)))
    selected_images = random.sample(all_images, num_photos)
    print(f"üì∏ –û–±—Ä–∞–Ω–æ {num_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π: {', '.join(selected_images)}")

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ–º—ñ–Ω—É—é—á—ñ –∫–æ–ª—å–æ—Ä–∏
    dominant_colors = [get_dominant_color(os.path.join(IMAGE_FOLDER, img)) for img in selected_images]
    print(f"üé® –î–æ–º—ñ–Ω—É—é—á—ñ –∫–æ–ª—å–æ—Ä–∏: {', '.join(dominant_colors)}")

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ–æ–Ω
    chosen_strategy = random.choice(BACKGROUND_STRATEGIES)
    prompt = chosen_strategy(dominant_colors)
    collage = generate_background_with_hf_space(prompt).convert("RGBA")

    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
    processed_photos = []
    for img_name in selected_images:
        img_path = os.path.join(IMAGE_FOLDER, img_name)
        photo = Image.open(img_path).convert("RGBA")
        processed_photos.append(photo)

    # --- –ó–ú–Ü–ù–ï–ù–û: –õ–æ–≥—ñ–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ñ–æ—Ç–æ —Ç–∞ —Ä–∞–º–æ–∫ –æ–±'—î–¥–Ω–∞–Ω–∞ ---

    # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–∏—Ä–∞—î–º–æ –æ–¥–Ω—É —Ä–∞–º–∫—É –¥–ª—è –≤—Å—å–æ–≥–æ –∫–æ–ª–∞–∂—É, —â–æ–± –±—É–ª–æ —Å—Ç–∏–ª—å–Ω–æ
    chosen_frame_path = None
    frames_folder = os.path.join(ASSETS_FOLDER, "frames")
    if os.path.exists(frames_folder):
        frame_files = [f for f in os.listdir(frames_folder) if f.lower().endswith('.png')]
        if frame_files:
            chosen_frame = random.choice(frame_files)
            chosen_frame_path = os.path.join(frames_folder, chosen_frame)
            print(f"üñºÔ∏è –û–±—Ä–∞–Ω–æ —Ä–∞–º–∫—É –¥–ª—è –∫–æ–ª–∞–∂—É: {chosen_frame}")

    placed_boxes = []
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ enumerate –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É
    for i, photo in enumerate(processed_photos):
        # 1. –ó–º–µ–Ω—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–æ—Ç–æ
        photo.thumbnail((600, 600))

        # 2. –ù–ê–ö–õ–ê–î–ê–Ñ–ú–û –†–ê–ú–ö–£ –ù–ê –ü–†–Ø–ú–ï –§–û–¢–û (—è–∫—â–æ —Ä–∞–º–∫–∞ —î)
        photo_with_frame = photo
        if chosen_frame_path:
            photo_with_frame = apply_frame(photo, chosen_frame_path, frames_config) # –ù–û–í–ò–ô –í–ò–ö–õ–ò–ö

        # 3. –û–ë–ï–†–¢–ê–Ñ–ú–û –í–ñ–ï –§–û–¢–û –ó –†–ê–ú–ö–û–Æ
        angle = random.randint(-15, 15)
        rotated_photo = photo_with_frame.rotate(angle, expand=True, resample=Image.BICUBIC)

        # 4. –®—É–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –±–µ–∑ –ø–µ—Ä–µ—Ç–∏–Ω—ñ–≤ —ñ —Ä–æ–∑–º—ñ—â—É—î–º–æ
        for _ in range(50): # 50 —Å–ø—Ä–æ–± –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ
            x = random.randint(50, collage.width - rotated_photo.width - 50)
            y = random.randint(50, collage.height - rotated_photo.height - 50)
            new_box = (x, y, x + rotated_photo.width, y + rotated_photo.height)

            if not any(check_overlap(new_box, box) for box in placed_boxes):
                placed_boxes.append(new_box)
                collage.paste(rotated_photo, (x, y), rotated_photo)
                print(f"üìç –†–æ–∑–º—ñ—â–µ–Ω–æ —Ñ–æ—Ç–æ {i+1}/{len(processed_photos)}")
                break
    
    # --- –í–ò–î–ê–õ–ï–ù–û: –°—Ç–∞—Ä–∏–π –±–ª–æ–∫ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è —Ä–∞–º–æ–∫, –≤—ñ–Ω –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω ---
    # –¢—É—Ç –±—É–≤ —Å—Ç–∞—Ä–∏–π —Ü–∏–∫–ª `for i, box in enumerate(placed_boxes):`, —è–∫–∏–π –º–∏ –≤–∏–¥–∞–ª–∏–ª–∏.

    # –î–æ–¥–∞—î–º–æ –¥–∞—Ç—É
    date_str = datetime.now().strftime("%d.%m.%Y")
    draw = ImageDraw.Draw(collage)
    try:
        text = f"All rights reserved you: {date_str}"
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ getbbox –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–æ–∑–º—ñ—Ä—É —Ç–µ–∫—Å—Ç—É
        bbox = draw.textbbox((0, 0), text, font=FONT)
        text_width = bbox[2] - bbox[0]
        x = (collage.width - text_width) // 8
        y = collage.height - 60
        # –ú–∞–ª—é—î–º–æ —Ç—ñ–Ω—å
       # draw.text((x+0, y+0), text, font=FONT, fill="#0000000E")
        # –ú–∞–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
        draw.text((x, y), text, font=FONT, fill="#0F0F0F01")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–∞—Ç–∏: {e}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_path = "collage_output.png"
    collage.save(output_path)
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –º—É–∑–∏–∫–∏
    music_folder = os.path.join(ASSETS_FOLDER, "music")
    if os.path.exists(music_folder):
        music_files = [f for f in os.listdir(music_folder) if f.endswith('.mp3')]
        if music_files:
            chosen_music = random.choice(music_files)
            print(f"\nüéµ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –º—É–∑–∏–∫–∞: {chosen_music}")

    print("\nüéâ –ö–û–õ–ê–ñ –£–°–ü–Ü–®–ù–û –°–¢–í–û–†–ï–ù–û! üéâ")