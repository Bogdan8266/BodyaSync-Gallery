import os
import random
import requests
import json
import base64
from datetime import datetime

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
OLLAMA_API_URL = "http://localhost:11434/api/generate"  # –ê–¥—Ä–µ—Å–∞ —Ç–≤–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Ollama
MODEL_NAME = "gemma3:4b"                           # –ù–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ, —è–∫—É –º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏
IMAGE_FOLDER = "test_images"                            # –ü–∞–ø–∫–∞ –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ —Ñ–æ—Ç–æ

# --- –§—É–Ω–∫—Ü—ñ—è 1: –ö–æ–¥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ---
# Ollama API –≤–∏–º–∞–≥–∞—î, —â–æ–± –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±—É–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ Base64
def encode_image_to_base64(image_path):
    """–ö–æ–¥—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Ä—è–¥–æ–∫ Base64."""
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')

# --- –§—É–Ω–∫—Ü—ñ—è 2: –ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI ---
# –¶–µ —Å–µ—Ä—Ü–µ –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏. –í–æ–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ–æ—Ç–æ —ñ –ø—Ä–æ–º–ø—Ç –¥–æ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ.
def analyze_image(image_path):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –≤–∏–∑–Ω–∞—á–∞—î –π–æ–≥–æ –≤–º—ñ—Å—Ç, –æ—Ü—ñ–Ω–∫—É
    —ñ —á–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –≤–æ–Ω–æ –¥–ª—è "—Å–ø–æ–≥–∞–¥—É".
    """
    print(f"üïµÔ∏è –ê–Ω–∞–ª—ñ–∑—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {os.path.basename(image_path)}...")
    
    encoded_image = encode_image_to_base64(image_path)
    
    # –¶–µ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∞ —á–∞—Å—Ç–∏–Ω–∞ - –Ω–∞—à "–ø—Ä–æ–º–ø—Ç" (–∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ).
    # –ú–∏ –ø—Ä–æ—Å–∏–º–æ —ó—ó –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON, —â–æ–± —ó—ó –±—É–ª–æ –ª–µ–≥–∫–æ –æ–±—Ä–æ–±–∏—Ç–∏.
    prompt_text = """
    Analyze the image and provide a response in JSON format.
    The JSON object must contain these keys:
    - "description": A short, three-sentence description of what's in the image.
    - "is_memory_candidate": A boolean (true or false). It should be true for photos of people, animals, nature, events, and false for screenshots, documents, or boring images.
    - "emotional_score": An integer from 1 to 10, where 10 is a very emotional or interesting photo.
    - "tags": A list of 8-16 relevant string tags in Ukrainian (e.g., ["—Å–æ–±–∞–∫–∞", "–ø–∞—Ä–∫", "–ª—ñ—Ç–æ"]).
    
    Provide only the JSON object in your response.
    """
    
    payload = {
        "model": MODEL_NAME,
        "prompt": prompt_text,
        "images": [encoded_image],
        "stream": False,
        "format": "json" # –ü—Ä–æ—Å–∏–º–æ Ollama –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∏–π JSON
    }
    
    try:
        response = requests.post(OLLAMA_API_URL, json=payload)
        response.raise_for_status() # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ HTTP (4xx, 5xx)
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Ollama –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É –≤–∏–≥–ª—è–¥—ñ JSON —Ä—è–¥–∫–∞, —è–∫–∏–π —Ç—Ä–µ–±–∞ —â–µ —Ä–∞–∑ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏
        response_data = response.json()
        analysis_json = json.loads(response_data.get("response", "{}"))
        
        return analysis_json
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Ollama: {e}")
        return None
    except json.JSONDecodeError:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–æ–¥–µ–ª—ñ.")
        return None

# --- –§—É–Ω–∫—Ü—ñ—è 3: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—ñ–¥–ø–∏—Å—É ---
def generate_caption(analysis_data, date_info):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–µ–ø–ª–∏–π –ø—ñ–¥–ø–∏—Å –¥–ª—è —Å–ø–æ–≥–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É."""
    print("‚úçÔ∏è –ì–µ–Ω–µ—Ä—É—é –ø—ñ–¥–ø–∏—Å –¥–ª—è —Å–ø–æ–≥–∞–¥—É...")
    
    description = analysis_data.get("description", "a nice moment")
    tags = ", ".join(analysis_data.get("tags", []))
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç, —Ç–µ–ø–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É
    prompt_text = f"""
    You are a friendly assistant who creates warm memories. 
    Write a short, nostalgic, and kind caption in Ukrainian.
    Use this information:
    - Photo description: {description}
    - Photo tags: {tags}
    - Time context: {date_info}
    
    Make it sound personal and heartwarming. For example: "–ü–∞–º'—è—Ç–∞—î—à —Ü–µ–π –¥–µ–Ω—å?.." or "–ü–æ–≥–ª—è–Ω—å, —è–∫–∏–π —á—É–¥–æ–≤–∏–π –º–æ–º–µ–Ω—Ç!".
    Write only the caption itself, without any extra text.
    """
    
    # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É –Ω–∞–º –≤–∂–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    payload = {
        "model": "gemma3:4b", # –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –º–µ–Ω—à—É –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ gemma:2b
        "prompt": prompt_text,
        "stream": False
    }
    
    try:
        response = requests.post(OLLAMA_API_URL, json=payload)
        response.raise_for_status()
        
        response_data = response.json()
        return response_data.get("response", "–ß—É–¥–æ–≤–∏–π —Å–ø–æ–≥–∞–¥!").strip()

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å—É: {e}")
        return "–ü—Ä–æ—Å—Ç–æ –≥–∞—Ä–Ω–∏–π –¥–µ–Ω—å!"

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ ---
if __name__ == "__main__":
    # 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –ø–∞–ø—Ü—ñ test_images
    all_images = [f for f in os.listdir(IMAGE_FOLDER) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    
    if not all_images:
        print(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å —É –ø–∞–ø—Ü—ñ {IMAGE_FOLDER}. –î–æ–¥–∞–π —Ç—É–¥–∏ —Ñ–æ—Ç–æ.")
    else:
        # 2. –í–∏–±–∏—Ä–∞—î–º–æ –æ–¥–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        random_image_name = random.choice(all_images)
        image_path = os.path.join(IMAGE_FOLDER, random_image_name)
        
        # 3. –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –π–æ–≥–æ
        analysis = analyze_image(image_path)
        
        if analysis:
            print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É ---")
            print(json.dumps(analysis, indent=2, ensure_ascii=False))
            print("--------------------------\n")

            # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Ö–æ—Ä–æ—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è —Å–ø–æ–≥–∞–¥—É
            if analysis.get("is_memory_candidate"):
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ü–µ –±—É–¥–µ –¥–∞—Ç–∞ –∑ EXIF)
                file_stat = os.stat(image_path)
                creation_date = datetime.fromtimestamp(file_stat.st_mtime)
                date_info = f"–∑—Ä–æ–±–ª–µ–Ω–µ {creation_date.strftime('%d %B, %Y —Ä–æ–∫—É')}" # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "–∑—Ä–æ–±–ª–µ–Ω–µ 15 —Ç—Ä–∞–≤–Ω—è, 2024 —Ä–æ–∫—É"
                
                # 5. –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å
                final_caption = generate_caption(analysis, date_info)
                
                print("\nüéâüéâüéâ –í–ê–® –°–¨–û–ì–û–î–ù–Ü–®–ù–Ü–ô –°–ü–û–ì–ê–î! üéâüéâüéâ")
                print(f"–§–æ—Ç–æ: {random_image_name}")
                print(f"–ü—ñ–¥–ø–∏—Å: {final_caption}")
                print("üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ")
            else:
                print(f"üòï –§–æ—Ç–æ '{random_image_name}' –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ —Ö–æ—Ä–æ—à–∏–π —Å–ø–æ–≥–∞–¥. –ú–æ–∂–ª–∏–≤–æ, —Ü–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç.")