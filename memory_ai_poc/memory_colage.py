import os
import random
import json
import requests
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
from gradio_client import Client, file

# ======================================================================
# –ë–õ–û–ö 1: –ó–ê–ì–ê–õ–¨–ù–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø
# ======================================================================

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ñ–æ—Ç–æ ---
HF_SPACE_CAPTION_URL = "bodyapromax2010/bodyasync-image-caption"
OLLAMA_API_URL = "http://localhost:11434/api/generate"
OLLAMA_MODEL_NAME = "gemma3:1b"

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–∞–∂—É ---
HF_SPACE_COLLAGE_URL = "bodyapromax2010/black-forest-labs-FLUX.1-dev2" 
IMAGE_FOLDER = "test_images"
ASSETS_FOLDER = "assets"
FRAMES_CONFIG_FILE = os.path.join(ASSETS_FOLDER, "frames_config.json")
FONT_FILE = os.path.join(ASSETS_FOLDER, "Roboto-Regular.ttf")

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ ---
try:
    FONT = ImageFont.truetype(FONT_FILE, 30)
except IOError:
    FONT = ImageFont.load_default()

def load_frames_config():
    if os.path.exists(FRAMES_CONFIG_FILE):
        with open(FRAMES_CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ä–∞–º–æ–∫ '{FRAMES_CONFIG_FILE}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    return {}

# ======================================================================
# –ë–õ–û–ö 2: –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –¢–ê –û–ü–ò–°–£ –§–û–¢–û
# ======================================================================

def get_raw_english_description(image_path):
    """–ö—Ä–æ–∫ –ê: –û—Ç—Ä–∏–º—É—î–º–æ "—Å–∏—Ä–∏–π" –æ–ø–∏—Å –∑ Hugging Face."""
    print(f"   - –ö—Ä–æ–∫ –ê: –ê–Ω–∞–ª—ñ–∑—É—é —Ñ–æ—Ç–æ '{os.path.basename(image_path)}' –Ω–∞ HF Space...")
    try:
        client = Client(HF_SPACE_CAPTION_URL)
        result = client.predict(file(image_path), api_name="/predict")
        return (result[0] if isinstance(result, (list, tuple)) else result).strip()
    except Exception as e:
        print(f"   - ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É –Ω–∞ HF: {e}"); return None

def create_warm_caption_from_description(english_description, date_info):
    """–ö—Ä–æ–∫ –ë: –°—Ç–≤–æ—Ä—é—î–º–æ "—Ç–µ–ø–ª–∏–π" –ø—ñ–¥–ø–∏—Å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Ollama."""
    print(f"   - –ö—Ä–æ–∫ –ë: –ì–µ–Ω–µ—Ä—É—é –ø—ñ–¥–ø–∏—Å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ñ–π –º–æ–¥–µ–ª—ñ '{OLLAMA_MODEL_NAME}'...")
    prompt_text = f"""
    You are a creative assistant. Your task is to transform a detailed, technical image description into a short, warm, and nostalgic caption in Ukrainian.
    Use this information:
    - Technical description: "{english_description}"
    - Time context: "{date_info}"
    Make it sound like a warm memory (1-2 sentences). Write ONLY the final Ukrainian caption.
    """
    payload = {"model": OLLAMA_MODEL_NAME, "prompt": prompt_text, "stream": False}
    try:
        response = requests.post(OLLAMA_API_URL, json=payload, timeout=60)
        response.raise_for_status()
        caption = response.json().get("response", "").strip()
        return caption if caption else "–ß—É–¥–æ–≤–∏–π —Å–ø–æ–≥–∞–¥!"
    except requests.exceptions.RequestException as e:
        print(f"   - ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Ollama: {e}"); return None

def is_good_memory(caption):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –Ω–µ —î –æ–ø–∏—Å —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."""
    if not caption: return False
    stop_words = ["screenshot", "text", "document", "chart", "diagram", "interface", "code"]
    return not any(word in caption.lower() for word in stop_words)

# ======================================================================
# –ë–õ–û–ö 3: –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –ö–û–õ–ê–ñ–£
# ======================================================================

def get_dominant_color(image_path):
    img = Image.open(image_path).resize((1, 1), Image.Resampling.LANCZOS)
    color = img.getpixel((0, 0))
    return f"#{color[0]:02x}{color[1]:02x}{color[2]:02x}"

def apply_frame(photo, frame_path, config):
    """
    –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—î —Ä–∞–º–∫–∏ –±—É–¥—å-—è–∫–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É. –Ø–∫—â–æ —Ä–∞–º–∫–∞ –±—ñ–ª—å—à–∞ –∑–∞ —Ñ–æ—Ç–æ,
    —Ñ—ñ–Ω–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä—é—î—Ç—å—Å—è, —â–æ–± –≤–º—ñ—Å—Ç–∏—Ç–∏ –≤—Å—é —Ä–∞–º–∫—É.
    """
    try:
        frame_template = Image.open(frame_path).convert("RGBA")
        params = config.get(os.path.basename(frame_path), {})
        scale = params.get("scale", 1.0)
        scale_x, scale_y = params.get("scale_x"), params.get("scale_y")
        if scale_x is not None and scale_y is not None:
            new_frame_width, new_frame_height = int(photo.width * scale_x), int(photo.height * scale_y)
        else:
            new_frame_width, new_frame_height = int(photo.width * scale), int(photo.height * scale)
        resized_frame = frame_template.resize((new_frame_width, new_frame_height), Image.Resampling.LANCZOS)
        result_canvas = Image.new("RGBA", resized_frame.size, (0, 0, 0, 0)) 
        photo_pos_x = (resized_frame.width - photo.width) // 2
        photo_pos_y = (resized_frame.height - photo.height) // 2
        offset_x, offset_y = params.get("offset_x", 0), params.get("offset_y", 0)
        photo_pos_x += offset_x
        photo_pos_y += offset_y
        result_canvas.paste(photo, (photo_pos_x, photo_pos_y))
        result_canvas.paste(resized_frame, (0, 0), resized_frame)
        return result_canvas
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—ñ —Ä–∞–º–∫–∏: {e}"); return photo

# --- –ü–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ñ–æ–Ω—É ---
def get_prompt_filmstrip_abstraction(c): return (f"A minimalist abstract background, vintage 35mm filmstrip, soft gradients, {random.choice(c)} and pastel palette, light leaks, cinematic, fine grain, 8k.")
def get_prompt_warm_retro_sky(c): return (f"A dreamy, retro-style abstract background, 70s sunset, warm {random.choice(c)} palette, smooth gradients, hazy clouds, sunburst effect, nostalgic film grain, ethereal, high resolution.")
def get_prompt_futuristic_geometry(c): return (f"A modern, tech-style abstract background, clean layered dynamic curved and straight lines, monochrome base with sharp vibrant {random.choice(c)} accents, holographic elements, smooth highlights, minimalist vector art, Behance HD.")
def get_prompt_soft_blobs(c): return (f"A serene minimalist organic background, large soft amorphous shapes like liquid ink bleeds, blended with smooth gradients in a soft {random.choice(c)} palette, subtle paper texture, bokeh effect, calm, high quality.")
def get_prompt_brushstrokes(c): return (f"An artistic abstract background, modern canvas painting style, energetic broad textured brushstrokes, calligraphic linear patterns, harmonious {random.choice(c)} scheme, light canvas texture, balanced composition.")
def get_prompt_symbolic_shapes(c): return (f"A clean modern graphic design background, soft gradient {random.choice(c)} base, simple icon-like vector shapes (thin circles, planet outlines), sparsely placed with gentle drop shadows, fine grain texture, rule of thirds.")
def get_prompt_abstract_flowers(c): return (f"A soft pastel abstract background, delicate minimalist botanical illustrations, simple line-art flower silhouettes, smoothly blended {random.choice(c)} gradient, subtle grain, ethereal glow for depth.")
def get_prompt_abstract_windows(c): return (f"A minimal architectural-style abstract background, layered framed square and rectangle shapes of varying opacities, on a smooth gradient {random.choice(c)} base, soft shadows, light grain, sharp highlights on edges.")
def get_prompt_watercolor_texture(c): return (f"A beautiful watercolor-style abstract background, heavily blended textured brushstrokes in {random.choice(c)} palette, organic gradient transitions, visible high-quality paper grain, realistic water smudges, artistic.")
def get_prompt_lines_and_splatters(c): return (f"A minimal abstract composition, modern art style, random organic ink splatters, irregular hand-drawn stripes, on a soft off-white paper texture, limited palette of black, gold, and one accent color (teal or rust), delicate grain.")
BACKGROUND_STRATEGIES = [get_prompt_filmstrip_abstraction, get_prompt_warm_retro_sky, get_prompt_futuristic_geometry, get_prompt_soft_blobs, get_prompt_brushstrokes, get_prompt_symbolic_shapes, get_prompt_abstract_flowers, get_prompt_abstract_windows, get_prompt_watercolor_texture, get_prompt_lines_and_splatters]
# --- –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è —Ñ–æ–Ω—É ---

def generate_background_with_hf_space(prompt):
    print(f"üé® –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ–æ–Ω –¥–ª—è –∫–æ–ª–∞–∂—É...")
    try:
        client = Client(HF_SPACE_COLLAGE_URL)
        result = client.predict(prompt, "low quality, blurry, text, watermark, logo, ugly", api_name="/infer")
        return Image.open(result[0]).resize((1080, 1920), Image.Resampling.LANCZOS)
    except Exception as e:
        print(f"üõë –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ñ–æ–Ω—É: {e}. –°—Ç–≤–æ—Ä—é—é –∑–∞–ø–∞—Å–Ω–∏–π —Ñ–æ–Ω."); return Image.new("RGB", (1080, 1920), (128, 0, 128))

def check_overlap(box1, box2, max_overlap_ratio=0.15):
    inter_left, inter_top = max(box1[0], box2[0]), max(box1[1], box2[1])
    inter_right, inter_bottom = min(box1[2], box2[2]), min(box1[3], box2[3])
    if inter_right > inter_left and inter_bottom > inter_top:
        inter_area = (inter_right - inter_left) * (inter_bottom - inter_top)
        box1_area = (box1[2] - box1[0]) * (box1[3] - box1[1])
        if box1_area > 0 and inter_area / box1_area > max_overlap_ratio: return True
    return False

# ======================================================================
# –ë–õ–û–ö 4: –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê - –û–ë'–Ñ–î–ù–ê–ù–ò–ô –ö–û–ù–í–ï–Ñ–† –ó –ü–û–ö–†–ê–©–ï–ù–ù–Ø–ú–ò
# ======================================================================
if __name__ == "__main__":
    
    # --- –ï–¢–ê–ü 1: –í–Ü–î–ë–Ü–† –§–û–¢–û–ì–†–ê–§–Ü–ô-–°–ü–û–ì–ê–î–Ü–í ---
    print("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–∞–∂—É-—Å–ø–æ–≥–∞–¥—É...")
    all_images = [f for f in os.listdir(IMAGE_FOLDER) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    if len(all_images) < 2:
        print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏."); exit()

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É, –≤–æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞
    num_to_find = random.randint(2, min(5, len(all_images)))
    print(f"üéØ –ú–µ—Ç–∞: –∑–Ω–∞–π—Ç–∏ {num_to_find} —Ö–æ—Ä–æ—à–∏—Ö —Ñ–æ—Ç–æ-—Å–ø–æ–≥–∞–¥—ñ–≤.")
    
    selected_memories, available_images = [], all_images.copy()
    
    while len(selected_memories) < num_to_find and available_images:
        image_name = random.choice(available_images)
        available_images.remove(image_name)
        image_path = os.path.join(IMAGE_FOLDER, image_name)

        raw_description = get_raw_english_description(image_path)
        if raw_description and is_good_memory(raw_description):
            date_info = f"–∑—Ä–æ–±–ª–µ–Ω–æ {datetime.fromtimestamp(os.path.getmtime(image_path)).strftime('%d %B, %Y —Ä–æ–∫—É')}"
            final_caption = create_warm_caption_from_description(raw_description, date_info)
            if final_caption:
                print(f"‚úÖ –§–æ—Ç–æ '{image_name}' –ø—ñ–¥—Ö–æ–¥–∏—Ç—å! –î–æ–¥–∞–Ω–æ –¥–æ –∫–æ–ª–∞–∂—É.")
                selected_memories.append({"filename": image_name, "caption": final_caption})
        else:
            print(f"‚ùå –§–æ—Ç–æ '{image_name}' –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ —Å–ø–æ–≥–∞–¥. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
    
    if not selected_memories:
        print("üõë –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—è—â–æ–≥–æ —Ñ–æ—Ç–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏."); exit()

    # --- –ï–¢–ê–ü 2: –í–ò–í–ï–î–ï–ù–ù–Ø –ó–í–Ü–¢–£ ---
    print("\n" + "="*50 + "\nüìù –°–ü–ò–°–û–ö –í–Ü–î–Ü–ë–†–ê–ù–ò–• –°–ü–û–ì–ê–î–Ü–í –î–õ–Ø –ö–û–õ–ê–ñ–£:\n" + "="*50)
    for i, memory in enumerate(selected_memories, 1):
        print(f"  {i}. –§–æ—Ç–æ: {memory['filename']}\n     –ü—ñ–¥–ø–∏—Å: {memory['caption']}")
    print("="*50 + "\n")

    # --- –ï–¢–ê–ü 3: –°–¢–í–û–†–ï–ù–ù–Ø –ö–û–õ–ê–ñ–£ –ó –ü–û–ö–†–ê–©–ï–ù–û–Æ –õ–û–ì–Ü–ö–û–Æ –†–û–ó–ú–Ü–©–ï–ù–ù–Ø ---
    print("üñºÔ∏è –ü–æ—á–∏–Ω–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–∞–∂—É...")
    selected_filenames = [m['filename'] for m in selected_memories]
    dominant_colors = [get_dominant_color(os.path.join(IMAGE_FOLDER, name)) for name in selected_filenames]
    
    chosen_strategy = random.choice(BACKGROUND_STRATEGIES)
    prompt = chosen_strategy(dominant_colors)
    collage = generate_background_with_hf_space(prompt).convert("RGBA")
    
    frames_config = load_frames_config()
    chosen_frame_path = None
    frames_folder = os.path.join(ASSETS_FOLDER, "frames")
    if os.path.exists(frames_folder):
        frame_files = [f for f in os.listdir(frames_folder) if f.lower().endswith('.png') and f in frames_config]
        if frame_files:
            chosen_frame = random.choice(frame_files)
            chosen_frame_path = os.path.join(frames_folder, chosen_frame)
            print(f"üé® –û–±—Ä–∞–Ω–æ —Ä–∞–º–∫—É –¥–ª—è –∫–æ–ª–∞–∂—É: {chosen_frame}")

    # <<< –ü–û–ö–†–ê–©–ï–ù–ù–Ø 2: –ó–º—ñ–Ω—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–æ—Ç–æ, —â–æ–± –≤–æ–Ω–∏ –∫—Ä–∞—â–µ –≤–º—ñ—â–∞–ª–∏—Å—è >>>
    PHOTO_SIZES_BY_COUNT = {
        2: 800,  # –í–µ–ª–∏–∫—ñ
        3: 650,  # –¢—Ä–æ—Ö–∏ –º–µ–Ω—à—ñ
        4: 550,  # –°–µ—Ä–µ–¥–Ω—ñ
        5: 480   # –ö–æ–º–ø–∞–∫—Ç–Ω—ñ
    }
    target_size = PHOTO_SIZES_BY_COUNT.get(len(selected_filenames), 600)
    print(f"‚ÑπÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ: {len(selected_filenames)}. –¶—ñ–ª—å–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä: {target_size}px.")

    placed_boxes = []
    for filename in selected_filenames:
        photo = Image.open(os.path.join(IMAGE_FOLDER, filename)).convert("RGBA")
        photo.thumbnail((target_size, target_size), Image.Resampling.LANCZOS)
        
        photo_with_frame = photo
        if chosen_frame_path:
            photo_with_frame = apply_frame(photo, chosen_frame_path, frames_config)
            
        angle = random.randint(-20, 20)
        rotated_photo = photo_with_frame.rotate(angle, expand=True, resample=Image.BICUBIC)
        
        # <<< –ì–û–õ–û–í–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ë—ñ–ª—å—à–µ —Å–ø—Ä–æ–± –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ >>>
        is_placed = False
        for _ in range(500): # –ó–±—ñ–ª—å—à–∏–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –¥–æ 500
            margin = 30 
            x = random.randint(margin, collage.width - rotated_photo.width - margin)
            y = random.randint(margin, collage.height - rotated_photo.height - margin)
            new_box = (x, y, x + rotated_photo.width, y + rotated_photo.height)
            
            if not any(check_overlap(new_box, box) for box in placed_boxes):
                placed_boxes.append(new_box)
                collage.paste(rotated_photo, (x, y), rotated_photo)
                print(f"üìç –†–æ–∑–º—ñ—â–µ–Ω–æ —Ñ–æ—Ç–æ '{filename}' –Ω–∞ –∫–æ–ª–∞–∂—ñ.")
                is_placed = True
                break
        
        if not is_placed:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ –¥–ª—è —Ñ–æ—Ç–æ '{filename}' –ø—ñ—Å–ª—è 500 —Å–ø—Ä–æ–±. –í–æ–Ω–æ –Ω–µ –±—É–¥–µ –Ω–∞ –∫–æ–ª–∞–∂—ñ.")

    output_path = "memory_collage_output.png"
    collage.save(output_path)
    
    print("\nüéâüéâüéâ –ö–û–õ–ê–ñ-–°–ü–û–ì–ê–î –£–°–ü–Ü–®–ù–û –°–¢–í–û–†–ï–ù–û! üéâüéâüéâ")
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ: {output_path}")